---
const { mensaje = "¡Hola!" } = Astro.props;
---

<div id="welcomeCurtain" class="welcome-curtain">
  <div class="curtain-content">
    <section
      id="welcome-bg"
      class="absolute opacity-30 rounded-full z-[-1] animate-pulse h-[100vw] w-[100vw] bg-[linear-gradient(-45deg,var(--color-link)_50%,var(--color-secondary)_50%)] blur-[80px]"
    >
    </section>

    <div
      id="welcomeGlobe"
      class="w-full p-1 font-mono overflow-hidden flex bg-transparent blur-[0.7px] text-[2vw] tracking-[0.5vw] after:content-[''] after:inline-block blur-[1px] after:w-full"
    >
    </div>

    <div id="welcomeOverlay" class="welcome-overlay">
      {mensaje}
    </div>

    <img 
      id="welcomeVector" 
      src="/comovas_laweb.svg" 
      alt="Imagen vectorial" 
      class="welcome-vector"
    />
  </div>
</div>

<style>
  .welcome-curtain {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: var(--color-bg);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .curtain-content {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .welcome-overlay {
    position: absolute;
    top: 20%;
    left: 20%;
    transform: translate(-50%, -50%) rotate(-10deg);
    z-index: 10001;
    color: #FFF;
    font-family: monospace, sans-serif;
    font-size: 4vw;
    text-align: center;
    padding: 4vw 5vw;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    animation: pulseDiagonal 10s ease-in-out infinite;
  }

  .welcome-vector {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10000;
    width: 50vw;
    height: auto;
    max-width: 100%;
    filter: drop-shadow(0 0 15px #ff00ff50);
  }

  @keyframes pulseDiagonal {
    0% {
      transform: translate(-50%, -50%) rotate(-10deg) scale(1);
      opacity: 1;
    }
    50% {
      transform: translate(-50%, -50%) rotate(-10deg) scale(1.2);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) rotate(-10deg) scale(1);
      opacity: 1;
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .welcome-overlay {
      font-size: 6vw;
      top: 25%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(-5deg);
    }
    
    .welcome-vector {
      width: 70vw;
    }
  }

  @media (max-width: 480px) {
    .welcome-overlay {
      font-size: 8vw;
      padding: 2vw 3vw;
    }
    
    .welcome-vector {
      width: 80vw;
    }
  }
</style>

<script>
  // Función para verificar si debe mostrar el telón
  function shouldShowCurtain() {
    const lastShown = localStorage.getItem('welcomeCurtainLastShown');
    const today = new Date().toDateString();
    
    return !lastShown || lastShown !== today;
  }

  // Función para marcar como mostrado hoy
  function markCurtainShown() {
    const today = new Date().toDateString();
    localStorage.setItem('welcomeCurtainLastShown', today);
  }

  // Inicializar el componente
  function initWelcomeCurtain() {
    const curtain = document.getElementById('welcomeCurtain');
    
    if (!shouldShowCurtain()) {
      curtain.style.display = 'none';
      return;
    }

    // Configurar GSAP para el efecto telón
    let scrollTriggered = false;

    function handleScroll() {
      if (scrollTriggered) return;
      scrollTriggered = true;

      // Verificar si GSAP está disponible
      if (typeof gsap !== 'undefined') {
        // Animar el telón hacia arriba
        gsap.to(curtain, {
          y: '-100vh',
          duration: 1.2,
          ease: 'power2.inOut',
          onComplete: () => {
            curtain.style.display = 'none';
            markCurtainShown();
            // Remover listeners
            window.removeEventListener('scroll', handleScroll);
            window.removeEventListener('wheel', handleScroll);
            window.removeEventListener('touchmove', handleScroll);
          }
        });

        // Animar el contenido del telón
        gsap.to('.curtain-content', {
          opacity: 0,
          duration: 0.8,
          ease: 'power2.out'
        });
      } else {
        // Fallback sin GSAP
        curtain.style.transition = 'transform 1.2s ease-in-out, opacity 0.8s ease-out';
        curtain.style.transform = 'translateY(-100vh)';
        curtain.style.opacity = '0';
        
        setTimeout(() => {
          curtain.style.display = 'none';
          markCurtainShown();
          // Remover listeners
          window.removeEventListener('scroll', handleScroll);
          window.removeEventListener('wheel', handleScroll);
          window.removeEventListener('touchmove', handleScroll);
        }, 1200);
      }
    }

    // Agregar listeners para detectar scroll
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('wheel', handleScroll, { passive: true });
    window.addEventListener('touchmove', handleScroll, { passive: true });
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWelcomeCurtain);
  } else {
    initWelcomeCurtain();
  }
</script>